---------- Projekt IDS 2018 ----------

-- Róbert Ďurovič [xdurov01]
-- Marek Poláček  [xpolac30]

------------- DROP TABLE -------------

DROP TABLE Lektor CASCADE CONSTRAINTS;
DROP TABLE Kurz CASCADE CONSTRAINTS;
DROP TABLE Ucastnik CASCADE CONSTRAINTS;
DROP TABLE Objednavka CASCADE CONSTRAINTS;
DROP TABLE Termin CASCADE CONSTRAINTS;
DROP TABLE Certifikat CASCADE CONSTRAINTS;
DROP TABLE Zakaznik CASCADE CONSTRAINTS;
DROP TABLE Mistnost CASCADE CONSTRAINTS;
DROP TABLE Faktura CASCADE CONSTRAINTS;
DROP TABLE Zamestnanec CASCADE CONSTRAINTS;
DROP TABLE Fyzicka_osoba CASCADE CONSTRAINTS;
DROP TABLE Firma CASCADE CONSTRAINTS;

------- DROP MATERIALIZED VIEW -------

DROP MATERIALIZED VIEW KurzInfo;


----------- DROP SEQUENCE ------------

DROP SEQUENCE CERT_SEQ;
DROP SEQUENCE FAK_SEQ;
DROP SEQUENCE ZAM_SEQ;

------------ CREATE TABLE ------------

CREATE TABLE Zakaznik (
	id_klienta NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	tel_c NUMBER,
	email VARCHAR(32) NOT NULL,
	heslo VARCHAR(16) NOT NULL
);

CREATE TABLE Fyzicka_osoba (
	id_klienta NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	jmeno VARCHAR(32),
	prijimeni VARCHAR(32)
);

CREATE TABLE Firma (
	id_klienta NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	nazev_firmy VARCHAR(32),
	ICO NUMBER, 
	DIC NUMBER
);

CREATE TABLE Zamestnanec (
	id_zamestnance NUMBER NOT NULL PRIMARY KEY, 
	jmeno VARCHAR(32), 
	prijimeni VARCHAR(32) NOT NULL, 
	tel_c NUMBER, 
	email VARCHAR(32)
);

CREATE TABLE Lektor (
	id_lektora NUMBER NOT NULL PRIMARY KEY,
	jmeno VARCHAR(32), 
	prijimeni VARCHAR(32) NOT NULL, 
	email VARCHAR(32), 
	tel_c NUMBER, 
	kvalifikace VARCHAR(64)
);

CREATE TABLE Mistnost (
	cislo_mistnosti NUMBER NOT NULL,
	cena_za_pronajem NUMBER, 
	kapacita NUMBER,
	adresa VARCHAR(32) NOT NULL,
	mesto VARCHAR(16), 
	PRIMARY KEY (cislo_mistnosti, adresa),
	CHECK (kapacita BETWEEN 1 and 500)
);

CREATE TABLE Kurz (
	id_kurzu NUMBER NOT NULL,
	id_lektora NUMBER, 
	uroven VARCHAR(16), 
	nazev VARCHAR(32), 
	pocet_lekci NUMBER, 
	cena_kurzu NUMBER, 
	typ VARCHAR(16),
	prerekvizity VARCHAR(32), 
	obsah_kurzu VARCHAR(32),
	PRIMARY KEY (id_kurzu)
);

CREATE TABLE Termin (
	datum_terminu DATE NOT NULL,
	id_kurzu NUMBER NOT NULL,
	cislo_mistnosti NUMBER NOT NULL, 
	obsazenost NUMBER, 
	uzaverka_registraci DATE,
	adresa VARCHAR(32) NOT NULL
);

CREATE TABLE Objednavka (
	id_objednavky NUMBER NOT NULL PRIMARY KEY, 
	id_klienta NUMBER NOT NULL,
	datum_platby DATE NOT NULL,
	datum_terminu DATE NOT NULL,
	id_kurzu NUMBER NOT NULL
);

CREATE TABLE Ucastnik (
	rodne_cislo NUMBER(10) NOT NULL, 
	jmeno VARCHAR(32), 
	prijimeni VARCHAR(32) NOT NULL, 
	tel_c NUMBER, 
	email VARCHAR(32), 
	adresa VARCHAR(64),
	id_objednavky NUMBER NOT NULL,
	PRIMARY KEY (rodne_cislo)
);

CREATE TABLE Certifikat (
	seriove_cislo_crt NUMBER NOT NULL PRIMARY KEY,
	rodne_cislo NUMBER(10),
	id_zamestnance NUMBER
);

CREATE TABLE Faktura (
	id_faktury NUMBER NOT NULL PRIMARY KEY,
	id_zamestnance NUMBER,
	id_objednavky NUMBER
);

------------- SEQUENCE ---------------

CREATE SEQUENCE CERT_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1 NOCYCLE;
CREATE SEQUENCE FAK_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE MINVALUE 1 NOCYCLE;


------------ ALTER TABLE -------------

ALTER TABLE Zakaznik ADD CONSTRAINT pk_id_klienta PRIMARY KEY(id_klienta);

ALTER TABLE Fyzicka_osoba ADD CONSTRAINT pk_id_klienta_2 PRIMARY KEY(id_klienta);
ALTER TABLE Firma ADD CONSTRAINT pk_id_klienta_3 PRIMARY KEY(id_klienta);

ALTER TABLE Kurz ADD( FOREIGN KEY (id_lektora) REFERENCES Lektor (id_lektora));

ALTER TABLE Termin ADD( FOREIGN KEY (id_kurzu) REFERENCES Kurz (id_kurzu));
ALTER TABLE Termin ADD( FOREIGN KEY (cislo_mistnosti, adresa) REFERENCES Mistnost (cislo_mistnosti, adresa));
ALTER TABLE Termin ADD( PRIMARY KEY (datum_terminu, id_kurzu));

ALTER TABLE Objednavka ADD( FOREIGN KEY (id_klienta) REFERENCES Zakaznik (id_klienta));
ALTER TABLE Objednavka ADD( FOREIGN KEY (datum_terminu, id_kurzu) REFERENCES Termin (datum_terminu, id_kurzu));

ALTER TABLE Ucastnik ADD( FOREIGN KEY (id_objednavky) REFERENCES Objednavka (id_objednavky));

ALTER TABLE Certifikat ADD( FOREIGN KEY (rodne_cislo) REFERENCES Ucastnik (rodne_cislo));
ALTER TABLE Certifikat ADD( FOREIGN KEY (id_zamestnance) REFERENCES Zamestnanec (id_zamestnance));

ALTER TABLE Faktura ADD( FOREIGN KEY (id_objednavky) REFERENCES Objednavka (id_objednavky));
ALTER TABLE Faktura ADD( FOREIGN KEY (id_zamestnance) REFERENCES Zamestnanec (id_zamestnance));


------------ INSERT INTO -------------


-- LEKTOR --
INSERT INTO Lektor(id_lektora, jmeno, prijimeni, email, tel_c, kvalifikace) 
VALUES(01, 'Marek', 'Tomanek', 'marek25@email.net', 12567898454, 'odbornik');

INSERT INTO Lektor(id_lektora, jmeno, prijimeni, email, tel_c, kvalifikace) 
VALUES(02, 'Jarek', 'Rotl', 'jare55k@email.net', 123458454, 'odbornik');

INSERT INTO Lektor(id_lektora, jmeno, prijimeni, email, tel_c, kvalifikace) 
VALUES(03, 'Darek', 'Lansky', 'dare454k@email.net', 4567898454, 'odbornik');


-- MISTNOST --
INSERT INTO Mistnost(cislo_mistnosti, cena_za_pronajem, kapacita, adresa, mesto) 
VALUES(01, 1000, 25, 'Královopolská 8', 'Brno');

INSERT INTO Mistnost(cislo_mistnosti, cena_za_pronajem, kapacita, adresa, mesto) 
VALUES(02, 10000, 250, 'Dolná 90', 'Praha');

INSERT INTO Mistnost(cislo_mistnosti, cena_za_pronajem, kapacita, adresa, mesto) 
VALUES(03, 100000, 500, 'Moravská 78', 'Olomouc');

INSERT INTO Mistnost(cislo_mistnosti, cena_za_pronajem, kapacita, adresa, mesto) 
VALUES(04, 1500, 50, 'Královopolská 8', 'Brno');

INSERT INTO Mistnost(cislo_mistnosti, cena_za_pronajem, kapacita, adresa, mesto) 
VALUES(05, 11000, 350, 'Dolná 90', 'Praha');


-- ZAMESTNANEC --
INSERT INTO Zamestnanec(id_zamestnance, jmeno, prijimeni) 
VALUES(01, 'Roman', 'Taus');

INSERT INTO Zamestnanec(id_zamestnance, jmeno, prijimeni, tel_c) 
VALUES(02, 'Roman', 'Paulus', 775323869);

INSERT INTO Zamestnanec(id_zamestnance, jmeno, prijimeni, email) 
VALUES(03, 'Jan', 'Polacek', 'jan.polacek@gmail.com');


-- ZAKAZNIK --
INSERT INTO Zakaznik(id_klienta, tel_c, email, heslo) 
VALUES(01, 775323833, 'zakaznik01@yahoo.com', 'hsaja792');

INSERT INTO Zakaznik(id_klienta, tel_c, email, heslo) 
VALUES(02, 775323834, 'zakaznik00@google.com', 'kskksaa89');

INSERT INTO Zakaznik(id_klienta, tel_c, email, heslo) 
VALUES(03, 775323835, 'zakaznik06@seznam.cz', 'cnsnks94');

-- FYZICKA OSOBA --
INSERT INTO Fyzicka_osoba
VALUES(01, 'Ivan', 'Hlasny');

INSERT INTO Fyzicka_osoba
VALUES(03, 'Boris', 'Gopnik');

-- FIRNA --
INSERT INTO Firma
VALUES(02, 'Pumukl sro', 9189101, 0901018);

-- KURZ --
INSERT INTO Kurz(id_kurzu, id_lektora, uroven, nazev, pocet_lekci, cena_kurzu, typ, prerekvizity, obsah_kurzu) 
VALUES(1, 01, 'zacatecnicka', 'JAVA', 12, 8250, 'prezencni', 'zadne', 'uvod do OOP v jazyku JAVA');

INSERT INTO Kurz(id_kurzu, id_lektora, uroven, nazev, pocet_lekci, cena_kurzu, typ, prerekvizity, obsah_kurzu) 
VALUES(2, 01, 'mirne pokrocila', 'JAVA', 12, 9150, 'prezencni', 'zacatecnicky kurz', 'jazyky OOP');

INSERT INTO Kurz(id_kurzu, id_lektora, uroven, nazev, pocet_lekci, cena_kurzu, typ, prerekvizity, obsah_kurzu) 
VALUES(3, 02, 'pokrocila', 'JAVA', 10, 7250, 'prezencni', 'kurz pro mirne pokrocile', 'mistrovstvi v OOP');

INSERT INTO Kurz(id_kurzu, id_lektora, uroven, nazev, pocet_lekci, cena_kurzu, typ, prerekvizity, obsah_kurzu) 
VALUES(4, 03, 'zacatecnicka', 'SQL', 20, 5250, 'prezencni', 'zadne', 'uvod do databaz');

INSERT INTO Kurz(id_kurzu, id_lektora, uroven, nazev, pocet_lekci, cena_kurzu, typ, prerekvizity, obsah_kurzu) 
VALUES(5, 02, 'mirne pokrocila', 'SQL', 14, 5450, 'prezencni', 'zacatecnicky kurz', ' pokrocile zaciatky s databazami');

INSERT INTO Kurz(id_kurzu, id_lektora, uroven, nazev, pocet_lekci, cena_kurzu, typ, prerekvizity, obsah_kurzu) 
VALUES(6, 02, 'pokrocila', 'SQL', 17, 10250, 'distancni', 'kurz pre mirne pokrocile', 'navrhujeme weby');

INSERT INTO Kurz(id_kurzu, id_lektora, uroven, nazev, pocet_lekci, cena_kurzu, typ, prerekvizity, obsah_kurzu) 
VALUES(7, 01, 'zacatecnicka', 'JavaScript', 8, 4300, 'distancni', 'zacatenicky kurz', 'vyuka programovania');

INSERT INTO Kurz(id_kurzu, id_lektora, uroven, nazev, pocet_lekci, cena_kurzu, typ, prerekvizity, obsah_kurzu) 
VALUES(8, 03, 'mirne pokrocila', 'JavaScript', 16, 9550, 'distancni', 'kurz pro zacatenicky', 'tvorba webu');

INSERT INTO Kurz(id_kurzu, id_lektora, uroven, nazev, pocet_lekci, cena_kurzu, typ, prerekvizity, obsah_kurzu) 
VALUES(9, 03, 'pokrocila', 'JavaScript', 12, 8250, 'distancni', 'kurz pre zacatecnikov', 'uvod do programovania');


-- TERMIN --
INSERT INTO Termin(datum_terminu, id_kurzu, cislo_mistnosti, obsazenost, uzaverka_registraci, adresa) 
VALUES(TO_DATE('12:05 02/03/2015', 'hh24:mi dd/mm/yy'), 1, 01, 25, TO_DATE('12:05 01/03/2019', 'hh24:mi dd/mm/yy'), 'Královopolská 8');

INSERT INTO Termin(datum_terminu, id_kurzu, cislo_mistnosti, obsazenost, uzaverka_registraci, adresa) 
VALUES(TO_DATE('12:05 02/04/2015', 'hh24:mi dd/mm/yy'), 1, 01, 10, TO_DATE('12:05 01/03/2019', 'hh24:mi dd/mm/yy'), 'Královopolská 8');

INSERT INTO Termin(datum_terminu, id_kurzu, cislo_mistnosti, obsazenost, uzaverka_registraci, adresa) 
VALUES(TO_DATE('12:05 02/05/2015', 'hh24:mi dd/mm/yy'), 1, 04, 17, TO_DATE('12:05 01/03/2019', 'hh24:mi dd/mm/yy'), 'Královopolská 8');

INSERT INTO Termin(datum_terminu, id_kurzu, cislo_mistnosti, obsazenost, uzaverka_registraci, adresa) 
VALUES(TO_DATE('12:05 02/03/2016', 'hh24:mi dd/mm/yy'), 2, 02, 15, TO_DATE('12:05 01/05/2016', 'hh24:mi dd/mm/yy'), 'Dolná 90');

INSERT INTO Termin(datum_terminu, id_kurzu, cislo_mistnosti, obsazenost, uzaverka_registraci, adresa) 
VALUES(TO_DATE('12:05 02/03/2017', 'hh24:mi dd/mm/yy'), 3, 03, 15, TO_DATE('12:05 01/06/2017', 'hh24:mi dd/mm/yy'), 'Moravská 78');


-- OBJEDNAVKA --
INSERT INTO Objednavka(id_objednavky, id_klienta, datum_platby, datum_terminu, id_kurzu) 
VALUES(01, 01, TO_DATE('09:05 09/08/2015', 'hh24:mi dd/mm/yy'), TO_DATE('12:05 02/03/2017', 'hh24:mi dd/mm/yy'), 3);

INSERT INTO Objednavka(id_objednavky, id_klienta, datum_platby, datum_terminu, id_kurzu) 
VALUES(02, 03, TO_DATE('19:58 01/03/2018', 'hh24:mi dd/mm/yy'), TO_DATE('12:05 02/03/2016', 'hh24:mi dd/mm/yy'), 2);

INSERT INTO Objednavka(id_objednavky, id_klienta, datum_platby, datum_terminu, id_kurzu) 
VALUES(03, 02, TO_DATE('17:25 30/10/2017', 'hh24:mi dd/mm/yy'), TO_DATE('12:05 02/03/2015', 'hh24:mi dd/mm/yy'), 1);


-- UCASTNIK --
INSERT INTO Ucastnik(rodne_cislo, jmeno, prijimeni, tel_c, email, adresa, id_objednavky) 
VALUES(0327780327, 'Terry', 'Pratcher', 852369741, 'terry@pratcher.to', 'Ulice Terryho 01, Kyjov 696 35', 03);

INSERT INTO Ucastnik(rodne_cislo, jmeno, prijimeni, tel_c, email, adresa, id_objednavky) 
VALUES(0104770104, 'Roan', 'Noan', 852569741, 'roan25@pratcher.to', 'Ulice Terryho 02, Kyjov 696 35', 02);

INSERT INTO Ucastnik(rodne_cislo, jmeno, prijimeni, tel_c, email, adresa, id_objednavky) 
VALUES(1212901212, 'Jeff', 'Peff', 852669741, 'jeff26@pratcher.to', 'Ulice Terryho 03, Ostrovanky 696 34', 01);


-- CERTIFIKAT --
INSERT INTO Certifikat(seriove_cislo_crt, rodne_cislo, id_zamestnance) 
VALUES(CERT_SEQ.NEXTVAL, 0327780327, 01);

INSERT INTO Certifikat(seriove_cislo_crt, rodne_cislo, id_zamestnance)
VALUES(CERT_SEQ.NEXTVAL, 0104770104, 03);

INSERT INTO Certifikat(seriove_cislo_crt) 
VALUES(CERT_SEQ.NEXTVAL);


-- FAKTURA --
INSERT INTO Faktura(id_faktury, id_zamestnance, id_objednavky) 
VALUES(FAK_SEQ.NEXTVAL, 02, 03);

INSERT INTO Faktura(id_faktury, id_zamestnance, id_objednavky) 
VALUES(FAK_SEQ.NEXTVAL, 02, 01);

INSERT INTO Faktura(id_faktury, id_zamestnance, id_objednavky) 
VALUES(FAK_SEQ.NEXTVAL, 01, 02);


------------ SQL DOTAZY --------------

-- [1] dotaz nad dvomi tabulkami: Vypise kurz a lektora, ktory ho vyucuje a taktiez vypise uroven a cenu tohto kurzu
SELECT L.prijimeni AS lektor, K.nazev AS nazev_kurzu, K.uroven, K.cena_kurzu AS cena_kurzu
FROM Lektor L, Kurz K
WHERE L.id_lektora = K.id_lektora;

-- [2] dotaz nad dvomi tabulkami: Vypise vsetky terminy a k nim aj nazvy a typy (prezencni/distancni) a urovne kurzov, ktore sa v dane terminy vyucuju
SELECT K.nazev, K.typ, K.uroven, T.datum_terminu AS datum
FROM Termin T, Kurz K
WHERE T.id_kurzu = K.id_kurzu;



-- [1] dotaz nad tromi tabulkami: Vypise zamestnanca, ktory vydal konkretny certifikat so seriovym cislom a ucastnika, ktory tento certifikat ziskal
SELECT Z.prijimeni AS vydal, C.seriove_cislo_crt AS cislo_certifikatu, U.prijimeni AS ziskal
FROM Zamestnanec Z, Certifikat C, Ucastnik U
WHERE Z.id_zamestnance = C.id_zamestnance and C.rodne_cislo = U.rodne_cislo;



-- [1] dotaz s klauzulou GROUP BY a agregatnou funkciou: Vypise najnizsiu cenu pre kazdy typ kurzu (prezencni a distancni)
SELECT K.typ, min(K.cena_kurzu)
FROM Kurz K
GROUP BY K.typ;

-- [2] dotaz s klauzulou GROUP BY a agregatnou funkciou: Vypise priemernu cenu za prenajom miestnosti v kazdom meste, kde sa moze konat vyuka
SELECT M.mesto, avg(M.cena_za_pronajem)
FROM Mistnost M
GROUP BY M.mesto;



-- [1] dotaz obsahujuci predikat EXISTS: Vypise meno zamestnanca, ktory nevydal ziadny certifikat
SELECT Z.prijimeni
FROM Zamestnanec Z
WHERE NOT EXISTS (
	SELECT C.id_zamestnance
	FROM Certifikat C
	WHERE C.id_zamestnance = Z.id_zamestnance
);


-- [1] dotaz obsahujuci predikat IN s vnorenym SELECTom: Vypise meno a priezvisko Ucastnika, ktory sa zucastnil kurzu v roku 2015
SELECT U.jmeno, U.prijimeni
FROM Ucastnik U
WHERE U.id_objednavky
IN (
	SELECT O.id_objednavky
	FROM Objednavka O
	WHERE O.datum_terminu BETWEEN '01-01-2015' and '31-12-2015'
);


------------- PROCEDURY --------------

SET serveroutput ON;

-- vypocita priemernu cenu jednej lekcie
CREATE OR REPLACE PROCEDURE cena_lekcie(nazev IN VARCHAR)
IS
CURSOR price IS SELECT * FROM Kurz;
	tmp price%ROWTYPE;
	num_lectures NUMBER;
	overall_price NUMBER;
	hour_price NUMBER;
BEGIN
num_lectures := 0;
overall_price := 0;
hour_price := 0;
OPEN price;
LOOP
	FETCH price into tmp;
	EXIT WHEN price%NOTFOUND;

	IF (tmp.nazev = nazev) THEN
		num_lectures := num_lectures + tmp.pocet_lekci;
		overall_price := overall_price + tmp.cena_kurzu;
	END IF;
END LOOP;

hour_price := overall_price / num_lectures;

-- zaokruhlenie
hour_price := ROUND(hour_price);

CLOSE price;
dbms_output.put_line('V kurze ' || nazev || ' je priemerna sadzba za lekciu ' || hour_price || ' czk.');
EXCEPTION
WHEN ZERO_DIVIDE THEN
dbms_output.put_line('Pre dany kurz nemozno sadzbu za lekciu dopocitat!');
WHEN OTHERS THEN
Raise_Application_Error(-20005, 'Nastala chyba!');
END;
/

-- ukazka prvej procedury
EXECUTE cena_lekcie('JavaScript');



-- vypocet percentualnej vytazenosti miestnostni v danom meste
CREATE OR REPLACE PROCEDURE perc_obsadenost(mesto IN VARCHAR)
IS
CURSOR capable IS SELECT * FROM Termin NATURAL JOIN Mistnost;
	tmp capable%ROWTYPE;
	overall_percentage NUMBER;
	capacity NUMBER;
	cap_classroom NUMBER;
BEGIN
	overall_percentage := 0;
	cap_classroom := 0;
	capacity := 0;
	OPEN capable;
	LOOP
		FETCH capable INTO tmp;
		EXIT WHEN capable%NOTFOUND;

		IF (tmp.mesto = mesto) THEN
			capacity := capacity + tmp.kapacita;
			cap_classroom := cap_classroom + tmp.obsazenost;
		END IF;

	END LOOP;

	-- vypocet percenta
	overall_percentage := cap_classroom / capacity;
	overall_percentage := overall_percentage * 100;
	-- zaokruhlenie
	overall_percentage := ROUND(overall_percentage);

	CLOSE capable;
	dbms_output.put_line('V meste ' || mesto || ' je v ramci kurzov obsadenych celkovo ' || cap_classroom || ' miest z ' || capacity || ' dostupnych, co predstavuje ' || overall_percentage || ' percentnu obsadenost.');
	EXCEPTION
	WHEN ZERO_DIVIDE THEN
	dbms_output.put_line('Nie je dostupna ziadna miestnost!');
	WHEN OTHERS THEN
	Raise_Application_Error(-20005, 'Nastala chyba!');
END;
/

-- ukazka procedury
EXECUTE perc_obsadenost('Brno');


-------------- TRIGGER ---------------

-- validacia datumu terminu
CREATE OR REPLACE TRIGGER trigger_valid_date
	AFTER INSERT OR UPDATE ON Termin
	FOR EACH ROW
BEGIN
	IF :new.datum_terminu is null OR 
	   :new.datum_terminu < SYSDATE OR
	   :new.datum_terminu > :new.uzaverka_registraci OR
	   :new.datum_terminu = TO_DATE('24/12/2018', 'DD/MM/YYYY') OR
	   :new.datum_terminu = TO_DATE('25/12/2018', 'DD/MM/YYYY')
	THEN
		Raise_Application_Error(-20001, 'Chyba v datume terminu!');
	END IF;
END;

/
show errors

-- validacia rodneho cisla
CREATE OR REPLACE TRIGGER trigger_r_c
AFTER INSERT OR UPDATE ON Ucastnik
FOR EACH ROW
DECLARE
    r_c Ucastnik.rodne_cislo%TYPE;
    den NUMBER(2);
    mesic NUMBER(2);
    rok NUMBER(2);
    datum DATE;
BEGIN
    r_c := :NEW.rodne_cislo;
    rok   := r_c / 100000000;	     
    mesic := MOD((r_c / 1000000), 100); 
    den   := MOD((r_c / 10000), 100);   
    	   
   	-- ak jde o zenu
    IF (mesic > 50) THEN
  		mesic := mesic - 50;
    END IF; 
   

    -- nie je delitelne 11
    IF (MOD(r_c, 11) <> 0) THEN
  		Raise_Application_Error (-20203, 'Chybne zadane rodne cislo!');
    END IF;
   
    -- kontrola platniho data
    BEGIN
  		datum := den||'.'||mesic||'.'||rok;
    EXCEPTION
  	WHEN OTHERS THEN
   	    Raise_Application_Error (-20204, 'Chybne zadane rodne cislo!');
	END;
END;	

/
show errors

-- autoinkrementacia id zamestnanca v pripade, ze nie je definovane
CREATE SEQUENCE ZAM_SEQ;

CREATE OR REPLACE TRIGGER trigger_zam_id
	BEFORE INSERT OR UPDATE ON Zamestnanec
	FOR EACH ROW
BEGIN
	IF :new.id_zamestnance is null THEN
	   :new.id_zamestnance := ZAM_SEQ.NEXTVAL;
	END IF;
END;

/
show errors

--------- UDELENENIE PRAV -----------

GRANT ALL ON Lektor TO xpolac30;
GRANT ALL ON Kurz TO xpolac30;
GRANT ALL ON Termin TO xpolac30;
GRANT ALL ON Mistnost TO xpolac30;
GRANT ALL ON Zakaznik TO xpolac30;
GRANT ALL ON Objednavka TO xpolac30;
GRANT ALL ON Faktura TO xpolac30;
GRANT ALL ON Ucastnik TO xpolac30;
GRANT ALL ON Certifikat TO xpolac30;
GRANT ALL ON Zamestnanec TO xpolac30;

GRANT EXECUTE ON cena_lekcie TO xpolac30;
GRANT EXECUTE ON perc_obsadenost TO xpolac30;


----------- EXPLAIN PLAN -------------

EXPLAIN PLAN FOR
SELECT mesto, MAX(obsazenost) FROM Mistnost NATURAL JOIN Termin GROUP BY obsazenost, mesto;

SELECT plan_table_output FROM TABLE(DBMS_XPLAN.display);

CREATE INDEX RM_TERM ON Mistnost (mesto);

EXPLAIN PLAN FOR
SELECT mesto, MAX(obsazenost) FROM Mistnost NATURAL JOIN Termin GROUP BY obsazenost, mesto;

SELECT plan_table_output FROM TABLE(DBMS_XPLAN.display);


--------  MATERIALIZED VIEW ----------

CREATE MATERIALIZED VIEW LOG ON Kurz WITH PRIMARY KEY, ROWID(uroven) INCLUDING NEW VALUES;

CREATE MATERIALIZED VIEW KurzInfo
CACHE                       -- optimalizacia citania pohladu
BUILD IMMEDIATE             -- naplnenie pohladu po vytvoreni
REFRESH FAST ON COMMIT      -- aktualizacia pohladov podla zaznamov po potvrdeni zmien v tabulkach
ENABLE QUERY REWRITE        -- pouzitie materializovaneho pohladu optimalizatorom
AS SELECT K.uroven, count(K.uroven) as urovne
FROM Kurz K
GROUP BY K.uroven;

GRANT ALL ON KurzInfo TO xpolac30;


-- nazorna ukazka mat. pohladu
SELECT * FROM KurzInfo;

INSERT INTO Kurz(id_kurzu, id_lektora, uroven, nazev, pocet_lekci, cena_kurzu, typ, prerekvizity, obsah_kurzu) 
VALUES(10, 03, 'pokrocila', 'Python', 10, 7950, 'distancni', 'kurz pro mirne pokrocile', 'programovanie v pythone');

COMMIT;

SELECT * FROM KurzInfo;


--------------------------------------
--------- TESTY TRIGGEROV ------------

/*

-- test triggeru c.1 -- nevalidny datum - vyhodi chybu [OK]
INSERT INTO Termin(datum_terminu, id_kurzu, cislo_mistnosti, obsazenost, uzaverka_registraci, adresa) 
VALUES(TO_DATE('12:05 24/12/2015', 'hh24:mi dd/mm/yy'), 2, 02, 15, TO_DATE('12:05 25/12/2018', 'hh24:mi dd/mm/yy'), 'Dolná 90');

SELECT * FROM Termin;

-- test triggeru c.2 -- rodne cislo v nespravnom formate - vyhodi chybu [OK]
INSERT INTO Ucastnik(rodne_cislo, jmeno, prijimeni, tel_c, email, adresa, id_objednavky) 
VALUES(8191, 'Jan', 'Kozak', 09076899766, 'kozak@jan.to', 'Bratislavska 01, Brno 696 35', 03);

SELECT * FROM Ucastnik;

*/

--------------------------------------
--------------------------------------